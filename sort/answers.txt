sort1 uses: bubble sort

How do you know?: somewhat short runtime for the sorted list and longer runtime for the unsorted.

    it took a long time sorting both the random and the reversed lists,
    and a significantly less time going through the already sorted list.
    it's likely: O(n^2), and omega(n)

        random50000.txt ---> it took real 6.4, user 5.0, sys 0.23
        sorted50000.txt ---> real 1.15, user 0.023, sys 0.23
        reversed50000.txt ---> real 6.4, user 5.1, sys 0.23

sort2 uses: merged sort

How do you know?: equally short runtime.

    it took a significantly shorter time compared to sort1, sort3,
    and spent the same amout of time going through the random, sorted, and reversed lists
    it's likley: theta(log n)

        random50000.txt ---> it took real 1.09, user 0.06, sys 0.156
        sorted50000.txt ---> real 1.12, user 0.047, sys 0.184
        reversed50000.txt ---> real 1.18, user 0.05, sys 0.182

sort3 uses: selection sort

How do you know?: equally long run time.

    havening an equal amount of time through the random, sorted, and reversed lists
    and taking a long period of time to finish.
    it's likely: theta(n2)

        random50000.txt ---> it took real 3.9, user 2.7, sys 0.23
        sorted50000.txt ---> it took real 3.9, user 2.7, sys 0.23
        reversed50000.txt ---> it took real 3.9, user 2.7, sys 0.23


